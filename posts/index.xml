<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Donovan Muller</title>
    <link>https://donovanmuller.blog/posts/</link>
    <description>Recent content in Posts on Donovan Muller</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://donovanmuller.blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Cloud Skipper as a Service Broker</title>
      <link>https://donovanmuller.blog/spring-cloud-skipper-as-a-service-broker/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://donovanmuller.blog/spring-cloud-skipper-as-a-service-broker/</guid>
      <description>Kubernetes recently added support for the Open Service Broker API. Spring Cloud Skipper, an equally new project, provides a Continuous Delivery platform to deploy Spring Boot based applications to cloud platforms. Eager to play around with both, I combine both topics in the ubiquitous &amp;ldquo;hello world&amp;rdquo; demonstration with OpenShift.
Open Service Broker API The Open Service Broker API initiative was announced late in 2016 and established a working group to foster an industry standard for provisioing and wiring services into modern cloud native platforms.</description>
    </item>
    
    <item>
      <title>HTTP done three ways with Spring Cloud Kubernetes on OpenShift</title>
      <link>https://donovanmuller.blog/http-done-three-ways-with-spring-cloud-kubernetes-on-openshift/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://donovanmuller.blog/http-done-three-ways-with-spring-cloud-kubernetes-on-openshift/</guid>
      <description>A brief look at three ways to achieve synchronous HTTP based communication between microservices in an OpenShift environment using Spring Cloud projects.
Despite the fact that I now believe messaging based asynchronous communication between bounded contexts (in the context of DDD) is a better way for systems to communicate, there are times when a quick RESTful call is the pragmatic choice. This post takes a brief look at three ways to achieve this when deploying to an OpenShift instance.</description>
    </item>
    
    <item>
      <title>Camel Spring Cloud Stream</title>
      <link>https://donovanmuller.blog/camel-spring-cloud-stream/</link>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://donovanmuller.blog/camel-spring-cloud-stream/</guid>
      <description>The new Camel Spring Cloud Stream component allows you to use the programming model and binder abstractions from the Spring Cloud Stream project natively within Apache Camel.
In this post we&amp;rsquo;ll breeze through a simple sample application demonstrating how to use the Camel Spring Cloud Stream component.
Introduction I&amp;rsquo;ll let the official project page describe what Spring Cloud Stream is all about: &amp;ldquo;Spring Cloud Stream is a framework for building message-driven microservices.</description>
    </item>
    
    <item>
      <title>OpenShift Cluster Up with Docker for Mac</title>
      <link>https://donovanmuller.blog/openshift-cluster-up-with-docker-for-mac/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://donovanmuller.blog/openshift-cluster-up-with-docker-for-mac/</guid>
      <description>A quick step by step guide to getting a local, single node OpenShift cluster up and running with the oc CLI tools and Docker for Mac.
The oc If you&amp;rsquo;ve been to https://github.com/openshift/origin#openshift-application-platform latetly and gazed at the simplicity of installing a local OpenShift Origin cluster simply by typing oc cluster up, you&amp;rsquo;ll no doubt want to try that out!
However, the current (as of August 21st, 2016) assumption is that you need Docker Toolbox installed for this to work.</description>
    </item>
    
    <item>
      <title>SCDF OpenShift: Deploying Maven artifacts with custom Dockerfile</title>
      <link>https://donovanmuller.blog/scdf-openshift-deploying-maven-artifacts-with-custom-dockerfile/</link>
      <pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://donovanmuller.blog/scdf-openshift-deploying-maven-artifacts-with-custom-dockerfile/</guid>
      <description>Using Spring Cloud Data Flow Server OpenShift, we will deploy a stream to OpenShift, including a custom Spring Cloud Stream processor application deployed to a local Nexus repository with a custom Dockerfile.
This post follows on from the introduction of Spring Cloud Data Flow Server OpenShift using Spring Cloud Deployer OpenShift. If you have not yet read the previous post, it is strongly recommended you do so.
 Update (2017/02/19): Since this post was written, a 1.</description>
    </item>
    
    <item>
      <title>Spring Cloud Deployer OpenShift</title>
      <link>https://donovanmuller.blog/spring-cloud-deployer-openshift/</link>
      <pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://donovanmuller.blog/spring-cloud-deployer-openshift/</guid>
      <description>A Spring Cloud Deployer SPI implementation which extends Spring Cloud Deployer Kubernetes adding support for OpenShift 3 and with that the ability to accept both Docker and Maven resources.
 Update (2017/02/19): Since this post was written, a 1.1.0 release of the Spring Cloud Data Flow Server for OpenShift has been released. This release simplified the deployment of the server in an OpenShift environment using Templates and should be considered the recommended deployment mechanism.</description>
    </item>
    
    <item>
      <title>Storing XML natively in Oracle with JPA</title>
      <link>https://donovanmuller.blog/storing-xml-natively-in-oracle-with-jpa/</link>
      <pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://donovanmuller.blog/storing-xml-natively-in-oracle-with-jpa/</guid>
      <description>Storing and querying XML from a database in an efficient way with JPA, can be somewhat of a headache. This post describes how you can can use Oracle&amp;rsquo;s XMLType to achieve this.
Storing XML Assuming you really really have to store the raw XML, there are a few options.
Clobbering a seal Probably the easiest and most straightforward way, is to store the document as a String property annotated with @Lob.</description>
    </item>
    
    <item>
      <title>Bamboo and conditional execution of Maven tasks</title>
      <link>https://donovanmuller.blog/bamboo-and-conditional-execution-of-maven-tasks/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://donovanmuller.blog/bamboo-and-conditional-execution-of-maven-tasks/</guid>
      <description>Atlassian Bamboo is a great build server, however, if you, as part of your Git feature branch development workflow come across the situation where you want to skip Maven deployment for your plan branches but currently can&amp;rsquo;t configure that out of the box, read on&amp;hellip;
The problem We have some client libraries that are shared across multiple applications and we use Maven for our Java builds. These libraries are brought in via the normal Maven dependency management and therefore are deployed to an internal Nexus Maven repository.</description>
    </item>
    
  </channel>
</rss>